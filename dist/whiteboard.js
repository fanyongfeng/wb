var bundle = (function () {
  'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  var findDom = function findDom(sel) {
    var el = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;
    return el.querySelector(sel);
  };

  var log = {
    'log': function log(logMsg) {
      console.log(logMsg);
    },
    'error': function error(msg) {
      console.error(msg);
    }
  };

  var whiteboard =
  /*#__PURE__*/
  function () {
    function whiteboard(props) {
      _classCallCheck(this, whiteboard);

      var id = props.id;
      this.props = props;
      this.canvas = findDom("#".concat(id));
      this.checkParams();
    }

    _createClass(whiteboard, [{
      key: "checkParams",
      value: function checkParams() {
        if (!this.props.id) {
          log.error('need whiteboard ID');
        }
      }
    }]);

    return whiteboard;
  }();

  return whiteboard;

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2hpdGVib2FyZC5qcyIsInNvdXJjZXMiOlsiLi4vc3JjL3V0aWxzL2RvbS5qcyIsIi4uL3NyYy91dGlscy9lcnJvci5qcyIsIi4uL3NyYy93aGl0ZWJvYXJkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBjcmVhdGVEb20gPSBmdW5jdGlvbiAoZWwgPSAnZGl2JywgdHBsID0gJycsIGF0dHJzID0ge30sIGNuYW1lID0gJycpIHtcbiAgbGV0IGRvbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoZWwpXG4gIGRvbS5jbGFzc05hbWUgPSBjbmFtZVxuICBkb20uaW5uZXJIVE1MID0gdHBsXG4gIE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgIGxldCBrZXkgPSBpdGVtO1xuICAgIGxldCB2YWx1ZSA9IGF0dHJzW2l0ZW1dXG4gICAgaWYgKGVsID09PSAndmlkZW8nIHx8IGVsID09PSAnYXVkaW8nKSB7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZG9tLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkb20uc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpXG4gICAgfVxuICB9KVxuICByZXR1cm4gZG9tXG59XG5cbmV4cG9ydCBjb25zdCBoYXNDbGFzcyA9IGZ1bmN0aW9uIChlbCwgY2xhc3NOYW1lKSB7XG4gIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNvbWUuY2FsbChlbC5jbGFzc0xpc3QsIGl0ZW0gPT4gaXRlbSA9PT0gY2xhc3NOYW1lKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAhIWVsLmNsYXNzTmFtZS5tYXRjaChuZXcgUmVnRXhwKCcoXFxcXHN8XiknICsgY2xhc3NOYW1lICsgJyhcXFxcc3wkKScpKVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBhZGRDbGFzcyA9IGZ1bmN0aW9uIChlbCwgY2xhc3NOYW1lKSB7XG4gIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICBjbGFzc05hbWUucmVwbGFjZSgvKF5cXHMrfFxccyskKS9nLCAnJykuc3BsaXQoL1xccysvZykuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgIGl0ZW0gJiYgZWwuY2xhc3NMaXN0LmFkZChpdGVtKVxuICAgIH0pXG4gIH0gZWxzZSBpZiAoIWhhc0NsYXNzKGVsLCBjbGFzc05hbWUpKSB7XG4gICAgZWwuY2xhc3NOYW1lICs9ICcgJyArIGNsYXNzTmFtZVxuICB9XG59XG5leHBvcnQgY29uc3QgcmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbiAoZWwsIGNsYXNzTmFtZSkge1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgY2xhc3NOYW1lLnNwbGl0KC9cXHMrL2cpLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGl0ZW0pXG4gICAgfSlcbiAgfSBlbHNlIGlmIChoYXNDbGFzcyhlbCwgY2xhc3NOYW1lKSkge1xuICAgIGNsYXNzTmFtZS5zcGxpdCgvXFxzKy9nKS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgICAgbGV0IHJlZyA9IG5ldyBSZWdFeHAoJyhcXFxcc3xeKScgKyBpdGVtICsgJyhcXFxcc3wkKScpXG4gICAgICBlbC5jbGFzc05hbWUgPSBlbC5jbGFzc05hbWUucmVwbGFjZShyZWcsICcgJylcbiAgICB9KVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCB0b2dnbGVDbGFzcyA9IGZ1bmN0aW9uIChlbCwgY2xhc3NOYW1lKSB7XG4gIGNsYXNzTmFtZS5zcGxpdCgvXFxzKy9nKS5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgIGlmIChoYXNDbGFzcyhlbCwgaXRlbSkpIHtcbiAgICAgIHJlbW92ZUNsYXNzKGVsLCBpdGVtKVxuICAgIH0gZWxzZSB7XG4gICAgICBhZGRDbGFzcyhlbCwgaXRlbSlcbiAgICB9XG4gIH0pXG59XG5cbmV4cG9ydCBjb25zdCBmaW5kRG9tID0gZnVuY3Rpb24gKHNlbCwgZWwgPSBkb2N1bWVudCkge1xuICByZXR1cm4gZWwucXVlcnlTZWxlY3RvcihzZWwpXG59XG5cbmV4cG9ydCBjb25zdCBwYWRTdGFydCA9IGZ1bmN0aW9uIChzdHIsIGxlbmd0aCwgcGFkKSB7XG4gIGxldCBjaGFyc3RyID0gU3RyaW5nKHBhZCk7XG4gIGxldCBsZW4gPSBsZW5ndGggPj4gMDtcbiAgbGV0IG1heGxlbiA9IE1hdGguY2VpbChsZW4gLyBjaGFyc3RyLmxlbmd0aClcbiAgbGV0IGNoYXJzID0gW107XG4gIGxldCByID0gU3RyaW5nKHN0cilcbiAgd2hpbGUgKG1heGxlbi0tKSB7XG4gICAgY2hhcnMucHVzaChjaGFyc3RyKVxuICB9XG4gIHJldHVybiBjaGFycy5qb2luKCcnKS5zdWJzdHJpbmcoMCwgbGVuIC0gci5sZW5ndGgpICsgclxufVxuXG5leHBvcnQgY29uc3QgZm9ybWF0ID0gZnVuY3Rpb24gKHRpbWUpIHtcbiAgaWYgKHdpbmRvdy5pc05hTih0aW1lKSkge1xuICAgIHJldHVybiAnJ1xuICB9XG4gIGxldCBob3VyID0gcGFkU3RhcnQoTWF0aC5mbG9vcih0aW1lIC8gMzYwMCksIDIsIDApXG4gIGxldCBtaW51dGUgPSBwYWRTdGFydChNYXRoLmZsb29yKCh0aW1lIC0gaG91ciAqIDM2MDApIC8gNjApLCAyLCAwKVxuICBsZXQgc2Vjb25kID0gcGFkU3RhcnQoTWF0aC5mbG9vcigodGltZSAtIGhvdXIgKiAzNjAwIC0gbWludXRlICogNjApKSwgMiwgMClcbiAgcmV0dXJuIChob3VyID09PSAnMDAnID8gW21pbnV0ZSwgc2Vjb25kXSA6IFtob3VyLCBtaW51dGUsIHNlY29uZF0pLmpvaW4oJzonKVxufVxuXG5leHBvcnQgY29uc3QgZXZlbnQgPSBmdW5jdGlvbiAoZSkge1xuICBpZiAoZS50b3VjaGVzKSB7XG4gICAgbGV0IHRvdWNoID0gZS50b3VjaGVzWzBdIHx8IGUuY2hhbmdlZFRvdWNoZXNbMF1cbiAgICBlLmNsaWVudFggPSB0b3VjaC5jbGllbnRYIHx8IDBcbiAgICBlLmNsaWVudFkgPSB0b3VjaC5jbGllbnRZIHx8IDBcbiAgICBlLm9mZnNldFggPSB0b3VjaC5wYWdlWCAtIHRvdWNoLnRhcmdldC5vZmZzZXRMZWZ0XG4gICAgZS5vZmZzZXRZID0gdG91Y2gucGFnZVkgLSB0b3VjaC50YXJnZXQub2Zmc2V0VG9wXG4gIH1cbiAgZS5fdGFyZ2V0ID0gZS50YXJnZXQgfHwgZS5zcmNFbGVtZW50XG59XG5cbmV4cG9ydCBjb25zdCB0eXBlT2YgPSBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKS5tYXRjaCgvKFteXFxzLipdKykoPz1dJCkvZylbMF1cbn1cblxuZXhwb3J0IGNvbnN0IGRlZXBDb3B5ID0gZnVuY3Rpb24gKGRzdCwgc3JjKSB7XG4gIGlmICh0eXBlT2Yoc3JjKSA9PT0gJ09iamVjdCcgJiYgdHlwZU9mKGRzdCkgPT09ICdPYmplY3QnKSB7XG4gICAgT2JqZWN0LmtleXMoc3JjKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBpZiAodHlwZU9mKHNyY1trZXldKSA9PT0gJ09iamVjdCcgJiYgIShzcmNba2V5XSBpbnN0YW5jZW9mIE5vZGUpKSB7XG4gICAgICAgIGlmICghZHN0W2tleV0pIHtcbiAgICAgICAgICBkc3Rba2V5XSA9IHNyY1trZXldXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVlcENvcHkoZHN0W2tleV0sIHNyY1trZXldKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkc3Rba2V5XSA9IHNyY1trZXldXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gZHN0XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCB7XG4gICdsb2cnOiBmdW5jdGlvbiAobG9nTXNnKSB7XG4gICAgY29uc29sZS5sb2cobG9nTXNnKTtcbiAgfSxcbiAgJ2Vycm9yJzogKG1zZykgPT4ge1xuICAgIGNvbnNvbGUuZXJyb3IobXNnKTtcbiAgfVxufSIsImltcG9ydCB7XG4gIGZpbmREb21cbn0gZnJvbSAnLi91dGlscy9kb20nO1xuaW1wb3J0IGxvZyBmcm9tICcuL3V0aWxzL2Vycm9yJztcblxuY29uc3QgZGVmYXVsdFByb3BzID0ge1xuICBpZDogJ3doaXRlYm9hcmQnXG59XG5cbmNsYXNzIHdoaXRlYm9hcmQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIGNvbnN0IHtcbiAgICAgIGlkXG4gICAgfSA9IHByb3BzO1xuICAgIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgICB0aGlzLmNhbnZhcyA9IGZpbmREb20oYCMke2lkfWApO1xuICAgIHRoaXMuY2hlY2tQYXJhbXMoKTtcbiAgfVxuXG4gIGNoZWNrUGFyYW1zKCkge1xuICAgIGlmICghdGhpcy5wcm9wcy5pZCkge1xuICAgICAgbG9nLmVycm9yKCduZWVkIHdoaXRlYm9hcmQgSUQnKVxuICAgIH1cbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IHdoaXRlYm9hcmQ7Il0sIm5hbWVzIjpbImZpbmREb20iLCJzZWwiLCJlbCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImxvZ01zZyIsImNvbnNvbGUiLCJsb2ciLCJtc2ciLCJlcnJvciIsIndoaXRlYm9hcmQiLCJwcm9wcyIsImlkIiwiY2FudmFzIiwiY2hlY2tQYXJhbXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7RUEwRE8sSUFBTUEsVUFBVSxTQUFWQSxPQUFVLENBQVVDLEdBQVYsRUFBOEI7RUFBQSxNQUFmQyxFQUFlLHVFQUFWQyxRQUFVO0VBQ25ELFNBQU9ELEdBQUdFLGFBQUgsQ0FBaUJILEdBQWpCLENBQVA7RUFDRCxDQUZNOztBQzFEUCxZQUFlO0VBQ2IsU0FBTyxhQUFVSSxNQUFWLEVBQWtCO0VBQ3ZCQyxZQUFRQyxHQUFSLENBQVlGLE1BQVo7RUFDRCxHQUhZO0VBSWIsV0FBUyxlQUFDRyxHQUFELEVBQVM7RUFDaEJGLFlBQVFHLEtBQVIsQ0FBY0QsR0FBZDtFQUNEO0VBTlksQ0FBZjs7TUNTTUU7OztFQUNKLHNCQUFZQyxLQUFaLEVBQW1CO0VBQUE7O0VBQUEsUUFFZkMsRUFGZSxHQUdiRCxLQUhhLENBRWZDLEVBRmU7RUFJakIsU0FBS0QsS0FBTCxHQUFhQSxLQUFiO0VBQ0EsU0FBS0UsTUFBTCxHQUFjYixtQkFBWVksRUFBWixFQUFkO0VBQ0EsU0FBS0UsV0FBTDtFQUNEOzs7O29DQUVhO0VBQ1osVUFBSSxDQUFDLEtBQUtILEtBQUwsQ0FBV0MsRUFBaEIsRUFBb0I7RUFDbEJMLFlBQUlFLEtBQUosQ0FBVSxvQkFBVjtFQUNEO0VBQ0Y7Ozs7Ozs7Ozs7OzsifQ==
